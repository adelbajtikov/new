from flask import Flask, render_template, request, redirect, url_for, flash, session
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import os
import sqlite3
import pandas as pd
from flask import Flask, jsonify, request
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from datetime import datetime
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

import fitz  # PyMuPDF - —Ä–∞–±–æ—Ç–∞ —Å PDF
app = Flask(__name__)
UPLOAD_FOLDER = 'static/uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
# Path to the SQLite database
DATABASE = 'database/donations.db'
app.secret_key = 'root_123'
ADMIN_USERNAME = 'root_123'
ADMIN_PASSWORD = '4444'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/admin', methods=['GET'])
def admin_dashboard():
    if 'admin' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    users = conn.execute("SELECT id, username, blocked FROM users").fetchall()
    ads = conn.execute("SELECT * FROM ads").fetchall()
    organizations = conn.execute("SELECT id, name, blocked FROM organizations").fetchall()
    donations = conn.execute("SELECT d.id, d.amount, d.created_at, d.message, d.user_id, c.title as campaign_title FROM donations d JOIN campaigns c ON d.campaign_id = c.id").fetchall()
    conn.close()
    
    
    return render_template('admin.html', users=users, organizations=organizations, donations=donations, ads = ads)



@app.route('/admin/logout')
def admin_logout():
    session.pop('admin', None)
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', 'info')
    return redirect(url_for('login'))

@app.route('/admin/block_user/<int:user_id>', methods=['POST'])
def block_user(user_id):
    if 'admin' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    conn = get_db_connection()
    conn.execute("UPDATE users SET blocked = 1 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    return jsonify({'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})

@app.route('/admin/view_receipt/<int:donation_id>')
def view_receipt(donation_id):
    conn = get_db_connection()
    donation = conn.execute("SELECT d.id, d.amount, d.created_at, d.message, c.title as campaign_title FROM donations d JOIN campaigns c ON d.campaign_id = c.id WHERE d.id = ?", (donation_id,)).fetchone()
    conn.close()
    
    if not donation:
        return "–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    return render_template('receipt.html', donation=donation)
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
@app.route('/admin/unblock_user/<int:user_id>', methods=['POST'])
def unblock_user(user_id):
    if 'admin' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    conn = get_db_connection()
    conn.execute("UPDATE users SET blocked = 0 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    return jsonify({'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
     

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
def delete_old_entries():
    conn = sqlite3.connect("database/donations.db")
    cursor = conn.cursor()
    
    today = datetime.today().strftime('%Y-%m-%d')
    
    cursor.execute("DELETE FROM volunteering_opportunities WHERE date < ?", (today,))
    
    conn.commit()
    conn.close()
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ –∞–∫—Ü–∏–∏!")

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
delete_old_entries()
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
nltk.download('stopwords')
russian_stopwords = stopwords.words('english')
def get_similar_volunteering(opportunity_id, top_n=3):
    conn = sqlite3.connect('database/donations.db')
    df = pd.read_sql_query("SELECT id, title, description FROM volunteering_opportunities", conn)
    conn.close()

    print("üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
    print(df)

    if df.empty:
        print("‚ùå –ù–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –≤ –±–∞–∑–µ!")
        return []

    if opportunity_id not in df["id"].tolist():
        print(f"‚ùå –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å ID {opportunity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []

    df["description"] = df["description"].fillna("")  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(df["description"])

    idx = df[df["id"] == opportunity_id].index[0]
    print(f"üîç –ò–Ω–¥–µ–∫—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã: {idx}")

    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()
    similar_indices = cosine_sim.argsort()[-(top_n + 1):-1][::-1]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–∏–Ω–¥–µ–∫—Å—ã): {similar_indices}")

    recommended = df.iloc[similar_indices].to_dict(orient="records")
    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommended}")

    return recommended
@app.route('/recommend_volunteering/<int:opportunity_id>')
def recommend_volunteering(opportunity_id):
    recommendations = get_similar_volunteering(opportunity_id)
    return jsonify(recommendations)

@app.route('/campaign/<int:campaign_id>')
def campaign_details(campaign_id):
    conn = get_db_connection()
    campaign = conn.execute('SELECT * FROM campaigns WHERE id = ?', (campaign_id,)).fetchone()
    conn.close()

    if not campaign:
        return "–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    return render_template('campaign_details.html', campaign=campaign)
@app.route('/volunteering/<int:opportunity_id>')
def volunteering_details(opportunity_id):
    conn = get_db_connection()
    opportunity = conn.execute('SELECT * FROM volunteering_opportunities WHERE id = ?', (opportunity_id,)).fetchone()
    user_id = session.get("user_id")
    user = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
    conn.close()

    if not opportunity:
        return "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    return render_template('volunteering_details.html', opportunity=opportunity, user = user)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π
def get_similar_campaigns(campaign_id, top_n=3):
    conn = sqlite3.connect('database/donations.db')
    df = pd.read_sql_query("SELECT id, title, description FROM campaigns", conn)
    conn.close()

    # üîπ –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ –±–∞–∑—ã
    print("üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ –ë–î:")
    print(df)

    if df.empty:
        print("‚ùå –ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ!")
        return []

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–π campaign_id
    if campaign_id not in df["id"].tolist():
        print(f"‚ùå –ö–∞–º–ø–∞–Ω–∏—è —Å ID {campaign_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []

    # üîπ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    df["description"] = df["description"].fillna("")

    # üîπ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—É–±–∏—Ä–∞–µ–º stop_words)
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(df["description"])

    # üîπ –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–∞–º–ø–∞–Ω–∏–∏
    idx = df[df["id"] == campaign_id].index[0]
    print(f"üîç –ò–Ω–¥–µ–∫—Å –∫–∞–º–ø–∞–Ω–∏–∏: {idx}")

    # üîπ –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    cosine_sim = cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()

    # üîπ –ù–∞—Ö–æ–¥–∏–º top_n —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö
    similar_indices = cosine_sim.argsort()[-(top_n + 1):-1][::-1]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–∏–Ω–¥–µ–∫—Å—ã): {similar_indices}")

    recommended = df.iloc[similar_indices].to_dict(orient="records")
    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommended}")

    return recommended


@app.route('/recommend_campaigns/<int:campaign_id>')
def recommend_campaigns(campaign_id):
    recommendations = get_similar_campaigns(campaign_id)
    return jsonify(recommendations)
def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row  
    return conn
@app.route('/volunteering.html')
def volunteering():
    conn = get_db_connection()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –∞–∫—Ü–∏–π
    opportunities = conn.execute('SELECT * FROM volunteering_opportunities').fetchall()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    user = None
    if session.get('user_id'):
        user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    conn.close()

    return render_template('volunteering.html', opportunities=opportunities, user=user)
def delete_old_campaigns():
    conn = get_db_connection()
    cursor = conn.cursor()

    today = datetime.today().strftime('%Y-%m-%d')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    cursor.execute("DELETE FROM volunteering_opportunities WHERE date < ?", (today,))

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)

    conn.commit()
    conn.close()
    print("‚úÖ –°—Ç–∞—Ä—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!")

delete_old_campaigns()


@app.route("/", methods=["GET", "POST"])
def home():
    query = ""
    campaigns = []
    user = None  
    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if session.get("user_id"):
        user = conn.execute(
            "SELECT * FROM users WHERE id = ?", (session["user_id"],)
        ).fetchone()

    if request.method == "POST":
        query = request.form.get("query", "")
        if query:
            campaigns = conn.execute(
                "SELECT * FROM campaigns WHERE title LIKE ? OR description LIKE ?",
                (f"%{query}%", f"%{query}%"),
            ).fetchall()
        else:
            campaigns = conn.execute("SELECT * FROM campaigns").fetchall()
    else:
        campaigns = conn.execute("SELECT * FROM campaigns").fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è
    campaign = conn.execute("SELECT * FROM campaigns ORDER BY id LIMIT 1").fetchone()

    if campaign:
        percentage_collected = (campaign['collected'] / campaign['goal']) * 100 if campaign['goal'] else 0
    else:
        campaign = None  # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π, –ø–µ—Ä–µ–¥–∞–µ–º None
        percentage_collected = 0
    ads = conn.execute("SELECT * FROM ads").fetchall()

    conn.close()

    return render_template(
        "index.html",
        user=user,
        campaign=campaign,
        campaigns=campaigns,
        percentage_collected=percentage_collected,
        query=query,
        ads = ads,
    )

@app.route('/donate/<int:campaign_id>', methods=['GET', 'POST'])
def donate(campaign_id):
    conn = get_db_connection()
    campaign = conn.execute('SELECT * FROM campaigns WHERE id = ?', (campaign_id,)).fetchone()

    if not campaign:
        conn.close()
        return "–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    user_id = session.get('user_id')
    user = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone() if user_id else None

    if request.method == 'POST':
        name = request.form['name']
        amount = float(request.form['amount'])
        message = request.form.get('message', '')

        conn.execute(
            'INSERT INTO donations (campaign_id, name, amount, message, user_id) VALUES (?, ?, ?, ?, ?)',
            (campaign_id, name, amount, message, user_id)
        )
        conn.execute('UPDATE campaigns SET collected = collected + ? WHERE id = ?', (amount, campaign_id))
        conn.commit()
        conn.close()

        return jsonify({"success": True})  # ‚úÖ JSON-–æ—Ç–≤–µ—Ç –¥–ª—è AJAX

    conn.close()
    return render_template('donate.html', campaign=campaign, user=user)  # ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ GET

@app.route('/get_payment_history')
def get_payment_history():
    if not session.get('user_id'):
        return jsonify([])  # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    user_id = session['user_id']
    conn = get_db_connection()

    payments = conn.execute("""
        SELECT d.amount, d.message, d.created_at AS date, c.title AS campaign_title
        FROM donations d
        JOIN campaigns c ON d.campaign_id = c.id
        WHERE d.user_id = ?
        ORDER BY d.created_at DESC
    """, (user_id,)).fetchall()

    conn.close()

    return jsonify([dict(payment) for payment in payments])



@app.route('/join_volunteering/<int:opportunity_id>', methods=['POST'])
def join_volunteering(opportunity_id):
    if not session.get('user_id'):
        return jsonify({"message": "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!"}), 403

    user_id = session['user_id']
    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing = conn.execute(
        "SELECT * FROM volunteer_participants WHERE user_id = ? AND opportunity_id = ?",
        (user_id, opportunity_id)
    ).fetchone()
    
    if existing:
        conn.close()
        return jsonify({"message": "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!"})

    # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'confirmed' –∏ –Ω–∞—á–∏—Å–ª—è–µ–º 10 –±–∞–ª–ª–æ–≤
    conn.execute(
        "INSERT INTO volunteer_participants (user_id, opportunity_id, status) VALUES (?, ?, ?)",
        (user_id, opportunity_id, "confirmed")
    )
    conn.execute("UPDATE users SET points = points + 10 WHERE id = ?", (user_id,))
    
    conn.commit()
    conn.close()

    return jsonify({"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É! 10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ."})

@app.route('/confirm_volunteer/<int:user_id>/<int:opportunity_id>', methods=['POST'])
def confirm_volunteer(user_id, opportunity_id):
    conn = get_db_connection()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    conn.execute("UPDATE volunteer_participants SET status = 'confirmed' WHERE user_id = ? AND opportunity_id = ?",
                 (user_id, opportunity_id))

    # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–ª–ª—ã
    conn.execute("UPDATE users SET points = points + 10 WHERE id = ?", (user_id,))

    conn.commit()
    conn.close()

    return jsonify({"message": "–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! 10 –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ."})
@app.route('/thank_you')
def thank_you():
    return render_template('thank_you.html')
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        account_type = request.form['account_type']
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')

        conn = get_db_connection()
        cursor = conn.cursor()

        if account_type == 'user':
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        elif account_type == 'organization':
            cursor.execute("INSERT INTO organizations (name, password) VALUES (?, ?)", (username, hashed_password))

        conn.commit()
        conn.close()

        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success')
        return redirect(url_for('login'))

    return render_template('register.html')


@app.route('/organization/<int:org_id>')
def organization_dashboard(org_id):
    conn = get_db_connection()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    organization = conn.execute("SELECT * FROM organizations WHERE id = ?", (org_id,)).fetchone()

    if not organization:
        flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'danger')
        return redirect(url_for('organizations'))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    followers = conn.execute("""
        SELECT users.username FROM followers 
        JOIN users ON followers.user_id = users.id 
        WHERE followers.organization_id = ?
    """, (org_id,)).fetchall()

    conn.close()

    return render_template('organization_dashboard.html', organization=organization, followers=followers)


@app.route('/profile')
def profile():
    if not session.get('user_id'):
        flash('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!', 'danger')
        return redirect(url_for('login'))

    conn = get_db_connection()
    user_id = session['user_id']

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()

    # ‚úÖ –ö–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    campaigns = conn.execute(
        "SELECT * FROM campaigns WHERE user_id = ?", (user_id,)
    ).fetchall()

    # ‚úÖ –í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_opportunities = conn.execute(
        """SELECT v.*, 
        (SELECT COUNT(*) FROM volunteer_participants WHERE opportunity_id = v.id) AS participant_count
        FROM volunteering_opportunities v WHERE v.user_id = ?""",
        (user_id,)
    ).fetchall()
    user_opportunities = [dict(row) for row in user_opportunities]

    # ‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    for opportunity in user_opportunities:
        participants = conn.execute("""
            SELECT u.id AS user_id, u.username, vp.status 
            FROM volunteer_participants vp 
            JOIN users u ON vp.user_id = u.id 
            WHERE vp.opportunity_id = ?
        """, (opportunity['id'],)).fetchall()
        opportunity['participants'] = [dict(participant) for participant in participants] if participants else []

    # ‚úÖ –ö–∞–º–ø–∞–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö user —É—á–∞—Å—Ç–≤—É–µ—Ç
    participated_campaigns = conn.execute("""
        SELECT c.* FROM donations d
        JOIN campaigns c ON d.campaign_id = c.id
        WHERE d.user_id = ?
        GROUP BY c.id
    """, (user_id,)).fetchall()

    # ‚úÖ –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –∞–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö user —É—á–∞—Å—Ç–≤—É–µ—Ç
    participated_opportunities = conn.execute("""
        SELECT DISTINCT v.*
        FROM volunteer_participants vp
        JOIN volunteering_opportunities v ON vp.opportunity_id = v.id
        WHERE vp.user_id = ? AND vp.status = 'confirmed'
    """, (user_id,)).fetchall()
    # ‚úÖ –í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    volunteer_initiatives = conn.execute(
        """SELECT v.*, 
        (SELECT COUNT(*) FROM volunteer_participants WHERE opportunity_id = v.id) AS participant_count
        FROM volunteering_opportunities v WHERE v.user_id = ?""",
        (user_id,)
    ).fetchall()

    # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    volunteer_initiatives = [dict(row) for row in volunteer_initiatives]
    donations = conn.execute("""
        SELECT d.amount, d.message, d.created_at, c.title
        FROM donations d
        JOIN campaigns c ON d.campaign_id = c.id
        WHERE d.user_id = ?
        ORDER BY d.created_at DESC
    """, (user_id,)).fetchall()
    conn.close()
    return render_template(
        'profile.html',
        user=user,
        campaigns=campaigns,  
        user_opportunities=user_opportunities,
        volunteer_initiatives=volunteer_initiatives,
        participated_campaigns=participated_campaigns,  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏, –≥–¥–µ user —É—á–∞—Å—Ç–≤—É–µ—Ç
        participated_opportunities=participated_opportunities,  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∞–∫—Ü–∏–∏, –≥–¥–µ user —É—á–∞—Å—Ç–≤—É–µ—Ç
        donations = donations
    )
@app.route('/update_avatar', methods=['GET', 'POST'])
def update_avatar():
    if not session.get('user_id'):
        flash('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!', 'danger')
        return redirect(url_for('login'))

    if request.method == 'POST':
        if 'avatar' not in request.files:
            flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'danger')
            return redirect(request.url)

        file = request.files['avatar']

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = get_db_connection()
            conn.execute(
                'UPDATE users SET avatar = ? WHERE id = ?',
                (filepath, session['user_id'])
            )
            conn.commit()
            conn.close()

            flash('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('profile'))
        else:
            flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: PNG, JPG, JPEG, GIF.', 'danger')

    return render_template('update_avatar.html')
# –í—Ö–æ–¥
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞—à–µ–ª –∞–¥–º–∏–Ω
        if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
            session['admin'] = True
            session['role'] = "admin"
            flash('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', 'success')
            return redirect(url_for('admin_dashboard'))

        # 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor()

        # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user = cursor.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        if user:
            if user['blocked']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', 'danger')
                conn.close()
                return redirect(url_for('login'))

            if check_password_hash(user['password'], password):
                session['user_id'] = user['id']
                session['username'] = user['username']
                session['role'] = "user"  # ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
                flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!', 'success')
                conn.close()
                return redirect(url_for('home'))

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        organization = cursor.execute('SELECT * FROM organizations WHERE name = ?', (username,)).fetchone()
        if organization:
            if organization['blocked']:
                flash('–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!', 'danger')
                conn.close()
                return redirect(url_for('login'))

            if check_password_hash(organization['password'], password):
                session['org_id'] = organization['id']
                session['username'] = organization['name']
                session['role'] = "organization"
                flash('–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è!', 'success')
                conn.close()
                return redirect(url_for('organization_dashboard', org_id=organization['id']))


        conn.close()
        flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')

    return render_template('login.html')
@app.route('/organization/edit', methods=['GET', 'POST'])
def edit_organization_profile():
    if 'org_id' not in session:
        flash('–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è!', 'danger')
        return redirect(url_for('login'))

    conn = get_db_connection()
    organization = conn.execute("SELECT * FROM organizations WHERE id = ?", (session['org_id'],)).fetchone()

    if not organization:
        flash("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", "danger")
        conn.close()
        return redirect(url_for("organizations"))

    if request.method == 'POST':
        new_name = request.form['name']
        new_description = request.form['description']
        new_image_url = request.form['image_url']

        conn.execute("UPDATE organizations SET name = ?, description = ?, image_url = ? WHERE id = ?", 
                     (new_name, new_description, new_image_url, session['org_id']))
        conn.commit()
        conn.close()

        flash('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success')
        return redirect(url_for('organization_dashboard', org_id=session['org_id']))

    conn.close()
    return render_template('edit_organization_profile.html', organization=organization)



# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@app.route('/logout')
def logout():
    session.clear()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.', 'info')
    return redirect(url_for('login'))
@app.route('/organizations')
def organizations():
    conn = get_db_connection()
    organizations = conn.execute("SELECT * FROM organizations").fetchall()
    user = None
    if session.get('user_id'):
        user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    conn.close()
    return render_template('organizations.html', organizations=organizations, user = user)
@app.route('/create_campaign', methods=['GET', 'POST'])
def create_campaign():
    if not session.get('user_id'):
        flash('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!', 'danger')
        return redirect(url_for('login'))

    conn = get_db_connection()
    user = conn.execute("SELECT * FROM users WHERE id = ?", (session['user_id'],)).fetchone()
    conn.close()

    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        goal = float(request.form['goal'])
        days_left = int(request.form['days_left'])
        payment_details = request.form['payment_details']

        if 'image' not in request.files:
            flash('–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω', 'danger')
            return redirect(request.url)

        file = request.files['image']
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            image_url = f'static/uploads/{filename}'
        else:
            flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'danger')
            return redirect(request.url)

        conn = get_db_connection()
        conn.execute(
            'INSERT INTO campaigns (title, description, image_url, goal, collected, days_left, user_id, payment_details) '
            'VALUES (?, ?, ?, ?, 0, ?, ?, ?)',
            (title, description, image_url, goal, days_left, session['user_id'], payment_details)
        )
        conn.commit()
        conn.close()

        flash('–ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
        return redirect(url_for('profile'))

    return render_template('create_campaign.html', user=user)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º user –≤ —à–∞–±–ª–æ–Ω



def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
@app.route('/participate/<int:opportunity_id>', methods=['POST'])
def participate(opportunity_id):
    if not session.get('user_id'):
        return jsonify({'success': False, 'error': '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'}), 403

    conn = get_db_connection()
    user_id = session['user_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ–± —É—á–∞—Å—Ç–∏–∏
    existing_participation = conn.execute(
        "SELECT * FROM volunteer_participants WHERE user_id = ? AND opportunity_id = ?",
        (user_id, opportunity_id)
    ).fetchone()

    if existing_participation:
        return jsonify({'success': False, 'error': '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É'}), 400

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    conn.execute(
        "INSERT INTO volunteer_participants (user_id, opportunity_id, status) VALUES (?, ?, ?)",
        (user_id, opportunity_id, 'confirmed')
    )
    conn.execute(
        "UPDATE users SET points = points + 10 WHERE id = ?",
        (user_id,)
    )
    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —É—á–∞—Å—Ç–∏–µ!'})
@app.route('/create_volunteering', methods=['GET', 'POST'])
def create_volunteering():
    if not session.get('user_id'):
        flash('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!', 'danger')
        return redirect(url_for('login'))

    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()

    if request.method == 'POST':
        try:
            title = request.form.get('title')
            description = request.form.get('description')
            date = request.form.get('date')
            button_text = request.form.get('button_text')

            print(f"üìå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–æ—Ä–º—ã: {title=}, {description=}, {date=}, {button_text=}")

            if not title or not description or not date:
                flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'danger')
                return redirect(url_for('create_volunteering'))

            if 'image' not in request.files:
                flash('–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω', 'danger')
                return redirect(request.url)

            file = request.files['image']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(filepath)
            else:
                flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'danger')
                return redirect(request.url)

            print(f"üìå –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {filepath}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º session['user_id']
            user_id = session.get('user_id')
            if not user_id:
                print("‚ùå –û—à–∏–±–∫–∞: session['user_id'] –ø—É—Å—Ç–æ–π!")
                flash('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!', 'danger')
                return redirect(url_for('login'))

            # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –±–∞–∑—É
            try:
                conn.execute(
                    'INSERT INTO volunteering_opportunities (title, description, date, image_url, button_text, user_id) VALUES (?, ?, ?, ?, ?, ?)',
                    (title, description, date, filepath, button_text, user_id)
                )
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ë–î!")
                conn.commit()
                print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –ë–î: {e}")

            conn.close()
            flash('–í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success')
            return redirect(url_for('volunteering'))

        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞: {str(e)}', 'danger')
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")

    conn.close()
    return render_template('create_volunteering.html', user=user)


@app.route('/get_participants/<int:opportunity_id>')
def get_participants(opportunity_id):
    conn = get_db_connection()
    participants = conn.execute("""
        SELECT u.username FROM volunteer_participants vp
        JOIN users u ON vp.user_id = u.id
        WHERE vp.opportunity_id = ? AND vp.status = 'confirmed'
    """, (opportunity_id,)).fetchall()
    conn.close()

    return jsonify([dict(participant) for participant in participants])

@app.route('/admin/ads', methods=['GET', 'POST'])
def manage_ads():
    if 'admin' not in session:
        return redirect(url_for('admin_login'))

    conn = get_db_connection()

    if request.method == 'POST':
        title = request.form['title']
        image_url = request.form['image_url']
        link = request.form['link']

        conn.execute("INSERT INTO ads (title, image_url, link) VALUES (?, ?, ?)", 
                     (title, image_url, link))
        conn.commit()
        flash('–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')

    ads = conn.execute("SELECT * FROM ads").fetchall()
    conn.close()

    return render_template('admin_ads.html', ads=ads)

@app.route('/admin/delete_ad/<int:ad_id>', methods=['POST'])
def delete_ad(ad_id):
    if 'admin' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    conn = get_db_connection()
    conn.execute("DELETE FROM ads WHERE id = ?", (ad_id,))
    conn.commit()
    conn.close()

    flash('–†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success')
    return redirect(url_for('manage_ads'))

@app.route('/organization/profile')
def organization_profile():
    if 'org_id' not in session:
        flash('–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è!', 'danger')
        return redirect(url_for('login'))

    conn = get_db_connection()
    organization = conn.execute("SELECT * FROM organizations WHERE id = ?", (session['org_id'],)).fetchone()
    followers = conn.execute("SELECT users.username FROM followers JOIN users ON followers.user_id = users.id WHERE followers.organization_id = ?", (session['org_id'],)).fetchall()
    conn.close()

    return render_template('organization_profile.html', organization=organization, followers=followers)
@app.route('/follow_organization/<int:organization_id>', methods=['POST'])
def follow_organization(organization_id):
    if 'user_id' not in session:
        return jsonify({'success': False, 'error': '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'}), 403

    user_id = session['user_id']
    conn = get_db_connection()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_follow = conn.execute(
        "SELECT * FROM followers WHERE user_id = ? AND organization_id = ?",
        (user_id, organization_id)
    ).fetchone()

    if existing_follow:
        conn.close()
        return jsonify({'success': False, 'error': '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!'}), 400

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É followers
    conn.execute(
        "INSERT INTO followers (user_id, organization_id) VALUES (?, ?)",
        (user_id, organization_id)
    )
    conn.commit()
    conn.close()

    return jsonify({'success': True, 'message': '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!'})
@app.route('/admin/block_organization/<int:org_id>', methods=['POST'])
def block_organization(org_id):
    if 'admin' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    conn = get_db_connection()
    conn.execute("UPDATE organizations SET blocked = 1 WHERE id = ?", (org_id,))
    conn.commit()
    conn.close()
    
    return jsonify({'success': True, 'message': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'})


@app.route('/admin/unblock_organization/<int:org_id>', methods=['POST'])
def unblock_organization(org_id):
    if 'admin' not in session:
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    conn = get_db_connection()
    conn.execute("UPDATE organizations SET blocked = 0 WHERE id = ?", (org_id,))
    conn.commit()
    conn.close()
    
    return jsonify({'success': True, 'message': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'})

if __name__ == '__main__':
    app.run(debug=True)
